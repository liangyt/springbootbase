<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liangyt.repository.system.UserMapper">
  <resultMap id="BaseResultMap" type="com.liangyt.entity.system.User">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="status" property="status" />
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user
    where id = #{id,jdbcType=VARCHAR}
  </delete>

  <insert id="insert" parameterType="com.liangyt.entity.system.User">
    <selectKey keyProperty="id" resultType="String" order="BEFORE">
      select REPLACE(UUID(), '-', '') UUID
    </selectKey>
    insert into user (id, username, name, password
      )
    values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{name}, #{password,jdbcType=VARCHAR}
      )
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.liangyt.entity.system.User">
    update user
    <set>
      name = #{name,jdbcType=VARCHAR},
      <if test="status != null">
        status = #{status},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select id, username, name, password, status
    from user
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, username, name, password, status
    from user
  </select>

  <select id="findByCondfig" parameterType="map" resultMap="BaseResultMap">
    SELECT id, username, name, password, status
    from user
    <if test="keyword != null">
      where name LIKE concat('%', #{keyword}, '%')
    </if>
  </select>

  <select id="findUserByUsername" parameterType="string" resultMap="BaseResultMap">
    SELECT id, username, name, password, status
    from user WHERE username = #{username}
  </select>

  <delete id="deleteUserRoleByUserId" parameterType="string">
    delete from user_role
    where user_id = #{userId,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteUserRoleByRoleId" parameterType="string">
    delete from user_role
    where role_id = #{roleId,jdbcType=VARCHAR}
  </delete>

  <insert id="insertUserRole" parameterType="com.liangyt.entity.system.UserRole">
    insert into user_role (user_id, role_id)
    values (#{userId,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR})
  </insert>
  <select id="selectRolesByUserId" parameterType="string" resultType="string">
    select role_id roleId
    from user_role
    where user_id = #{userId,jdbcType=VARCHAR}
  </select>

  <select id="checkUsercodeExist" parameterType="string" resultType="int">
    select count(0)
    from user where username = #{username}
  </select>

  <!--根据用户获取有效权限列表-->
  <select id="findPermissionByUsername" parameterType="string" resultType="string">
    select DISTINCT permission.permission_code
    from user
    inner join user_role on user.id=user_role.user_id
    inner join role on user_role.role_id = role.id
    inner join permission_role on user_role.role_id=permission_role.role_id
    inner join permission on permission_role.permission_id = permission.id
    where user.username = #{username} and role.status=0 and user.status=0 and permission.status=0
  </select>

  <!--根据用户获取有效的角色列表-->
  <select id="findRolesByUsername" parameterType="string" resultType="string">
    select role.rolename
    from user
    inner join user_role on user.id=user_role.user_id
    inner join role on role.id = user_role.role_id
    where role.status=0 and user.username=#{username}
  </select>

  <select id="allPermission" resultType="com.liangyt.vo.system.ShiroFilterVO">
    select p.url, p.permission_code permissionCode, role.rolename from role
    inner join permission_role pr on role.id = pr.role_id
    inner join permission p on pr.permission_id = p.id
    where role.status = 0 and p.status = 0
  </select>
</mapper>