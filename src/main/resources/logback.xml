<?xml version="1.0" encoding="UTF-8"?>
<!--
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--
        节点<property>	：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量
    -->
    <property name="appName" value="springbootbase" />
    <!--
        节点<contextName>：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。
        但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
    -->
    <contextName>${appName}</contextName>

    <!--
        节点<timestamp>：获取时间戳字符串，他有两个属性key和datePattern
        key: 标识此<timestamp> 的名字；
　　　　 datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。

        如下例：使用的时候可以这样  ${bySecond}
    -->
    <timestamp  key="bySecond" datePattern="yyyyMMdd'T'HHmmss" />

    <!--
        节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
    -->
    <!--
        ConsoleAppender 把日志输出到控制台，有以下子节点：
　　　　　<encoder>：对日志进行格式化。
　　　　　<target>：字符串System.out(默认)或者System.err
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
        </encoder>
    </appender>

    <!--
        FileAppender：把日志添加到文件，有以下子节点：
　　　　　<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
　　　　　<encoder>：对记录事件进行格式化。
　　　　　<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
    -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>log.log</file>
        <append>true</append>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
        </encoder>
    </appender>

    <!--
        RollingFileAppender: 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
        <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
　　　　　<rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
            <fileNamePattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。 如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变； 如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
            <maxHistory>: 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。
            <timeBasedFileNamingAndTriggeringPolicy>节点: 有一个属性class: 一般使用 ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP,
    -->
    <appender name="ROLLLINGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/log.log</file>
        <append>true</append>
        <!--
            rollingPolicy标签指定的是日志分包策略，ch.qos.logback.core.rolling.TimeBasedRollingPolicy类实现的是基于时间的分包策略，
            分包间隔是根据fileNamePattern中指定的事件最小单位，比如例子中的%d{yyyy-MM-dd_HH-mm}的最小事件单位为分，它的触发方式就是1分钟，
            策略在每次想日志中添加新内容时触发，如果满足条件，就将log.log复制到logs/目录并更名为log-2017-08-24_13-13.1.log，并删除原log.log。
            maxHistory的值为指定logs/目录下存在的类似log-2017-08-24_13-13.1.log文件的最大个数，当超过时会删除最早的文件。
            此外，策略还可以互相嵌套，比如本例中在时间策略中又嵌套了文件大小策略，ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP实现对单文件大小的判断，
            当超过maxFileSize中指定大大小时，文件名中的变量%i会加一，即在不满足时间触发且满足大小触发时，
            会生成log-2017-08-24_13-13.1.log和log-2017-08-24_13-13.2.log两个文件。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>log.%d{yyyy-MM-dd_HH-mm}%i.zip</fileNamePattern>
            <maxHistory>120</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
        </encoder>
    </appender>

    <!--日志保存到Mongondb-->
    <appender name="MONGODB" class="com.liangyt.config.db.LogMongoDBAppender">
        <DbHost>localhost</DbHost>
        <DbPort>27017</DbPort>
        <DbName>exapp</DbName>
        <DbCollectionName>logging</DbCollectionName>
    </appender>

    <!--
        logger节点：设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
            name: 用来指定受此loger约束的某一个包或者具体的某一个类。
            level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。
            addtivity: 是否向上级loger传递打印信息。默认是true。
    -->
    <logger name="com.liangyt"  level="DEBUG"/>
    <logger name="org.springframework.web" level="DEBUG"/>

    <logger name="com.liangyt" level="DEBUG">
        <appender-ref ref="MONGODB" />
    </logger>

    <!--
        节点root：它也是<loger>元素，但是它是根logger,是所有<logger>的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了。
            level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG。

         <appender-ref>子节点：可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>
</configuration>